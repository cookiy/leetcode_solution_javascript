/**
请你来实现一个 atoi 函数，使其能将字符串转换成整数。

首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：

如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。
假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。
该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。
注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0 。

提示：

本题中的空白字符只包括空格字符 ' ' 。
假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。
 

示例 1:

输入: "42"
输出: 42
示例 2:

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:

输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:

输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
示例 5:

输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (−231) 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/string-to-integer-atoi
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */

/**
题意分析
官方的主要规则可以概况为：

无视开头空格
返回有符号整数
无视整数部分后的字符
范围在32位内（含）
其他情况返回0
各位JSer，你品，你细品，这个转换规则，是不是很眼熟？

现在来揭晓谜底，它就是JavaScript世界中的parseInt()这一API的转换规则。

逻辑梳理
现在来简要分析下parseInt()的转换规则，关于这个API的具体描述，可以查看MDN上的这篇文档。

parseInt(string, radix)：

string：要被解析的值。如果参数不是一个字符串，则将其转换为字符串。字符串开头的空白符将会被忽略。
radix（可选）：需要转换的进制，介于 2 到 36。
返回值： 如果被解析参数的第一个字符无法被转化成数值类型，则返回NaN。
对比下题意，发现

无视开头空格（满足）
返回有符号整数（满足）
无视整数部分后的字符（满足）
范围在32位内（含）（不满足）
其他情况返回0（不满足）
那么只要有针对性的处理下不满足的条件即可。

范围在32位内（含）
只需简单地将API转换后的值与临界值进行对比就行。

if (number < Math.pow(-2, 31) || number > Math.pow(2, 31) - 1) {
    return number < Math.pow(-2, 31) ? Math.pow(-2, 31) : Math.pow(2, 31) - 1;
}
其他情况返回0
很显然，API的返回值如果是NaN，则说明无法正常转换，所以只需将返回值和NaN进行比较即可。

注意，NaN和NaN并不全等，所以各位JSer不能使用全等操作符（===），而该使用isNaN()函数来比较。

if(isNaN(number)) {
    return 0;
} 
小细节
在使用parseInt(string, radix)这一API时，如果不传入radix参数，会有两种特殊情况：

如果字符串 string 以"0x"或者"0X"开头, 则基数是16 (16进制).
如果字符串 string 以"0"开头, 基数是8（八进制）或者10（十进制），那么具体是哪个基数，取决与ECMAScript的版本。
所以，通常建议在使用parseInt()这一API时，都明确给出期望的进制数，这是一个良好的编程习惯。

 */

/**
 * @param {string} str
 * @return {number}
 */
var myAtoi = function(str) {
    const number = parseInt(str, 10)
    if (isNaN(number)) {
        return 0;
    } else if (number < Math.pow(-2, 31) || number > Math.pow(2, 31) - 1) {
        return number < Math.pow(-2, 31) ? Math.pow(-2, 31) : Math.pow(2, 31) - 1;
    } else {
        return number;
    }
}


/**
 * @param {string} str
 * @return {number}
 */
var myAtoi = function(str) {
    return Math.max(Math.min(parseInt(str.trim().match(/^[+|-]?\d+/)||0), Math.pow(2,31)-1), -Math.pow(2,31))
};